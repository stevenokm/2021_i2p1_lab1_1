cmake_minimum_required(VERSION 3.2.2)

MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

macro(use_cxx17)
  if (CMAKE_VERSION VERSION_LESS "3.1")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
    endif ()
  else ()
    set (CMAKE_CXX_STANDARD 17)
  endif ()
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++abi")
endmacro(use_cxx17)

use_cxx17()

SUBDIRLIST(SUBDIRS ${CMAKE_SOURCE_DIR})
list(REMOVE_ITEM SUBDIRS "testbench" "CMakeFiles" "build" "jplag" "jplag_result" ".git")

project(lab1_1)

FOREACH(subdir ${SUBDIRS})
  get_filename_component(bin_name_string ${subdir} NAME)
  string(REPLACE " " ";" bin_name_list ${bin_name_string})
  list(GET bin_name_list 0 bin_name)
  set(bin_prefix "${CMAKE_PROJECT_NAME}_")
  set(main_cpp "${subdir}/${bin_prefix}${bin_name}.cpp")
  file(GLOB SRCS "${subdir}/*.cpp" "${subdir}/*.h")
  list(REMOVE_ITEM SRCS ${main_cpp})
  if(EXISTS ${CMAKE_SOURCE_DIR}/${main_cpp})
    add_executable ("${bin_prefix}${bin_name}" ${main_cpp} ${SRCS})
    target_link_libraries ("${bin_prefix}${bin_name}" m)
  else()
    message("file \"${main_cpp}\" does not exist. skip.")
  endif()
ENDFOREACH()
